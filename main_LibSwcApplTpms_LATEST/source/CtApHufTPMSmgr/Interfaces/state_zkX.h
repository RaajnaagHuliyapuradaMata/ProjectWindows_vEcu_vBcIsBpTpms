/************************************************************************************************************
 * (c) Beru Electronics GmbH      Abteilung BES2     2008
 ************************************************************************************************************/
/************************************************************************************************************
 * Project:       Reifendruckkontrolle TSS (TSS = tyre safety system)
 *
 * $Archive: /BMW/G3kompakt/Sw/SC4/template_can/application/source/tssappl/statemanager/state_zkX.h $
 *
 * File Status:   compiled           - (under construction, compiled etc.)
 *
 ************************************************************************************************************/
/************************************************************************************************************
 * Author:        Uwe Rapp           Beru Electronics GmbH (BES)
 *
 * Intials:       ur
 ************************************************************************************************************/
/************************************************************************************************************
 * Global Description
 * ==================
 *
 *
 *
 *
 *
 *
 ************************************************************************************************************/
/************************************************************************************************************
 * Modul Description
 * =================
 *
 * Purpose:
 *
 *
 *
 ************************************************************************************************************/
/************************************************************************************************************
 * Modul Abbreviation:
 * ===================
 *
 * ZK: Zustandskennung
 *
 ************************************************************************************************************/
/************************************************************************************************************
 * Glossary
 * ========
 *
 *
 *
 ************************************************************************************************************/
/************************************************************************************************************
 * Modul Modification
 * ==================
 *
 * $Log: /BMW/G3kompakt/Sw/SC4/template_can/application/source/tssappl/statemanager/state_zkX.h $
 * 
 * 4     13.03.09 17:11 Rapp
 * Funktion SetCalNotAckZK() hinzugefügt (OIL #361)
 *
 * 3     26.09.08 14:19 Peter
 * interface function 4 setting "pos changed bits" with WP as parameter
 *
 * 2     27.06.08 10:04 Rapp
 * Bitfelder umsortiert (wie G2)
 *
 * 1     17.06.08 10:43 Rapp
 * Integration "Statemanager"
 *
 *
 ************************************************************************************************************/
#ifndef _state_zk_X_H /* [0] */
#define _state_zk_X_H



/************************************************************************************************************
 *                                             include
 ************************************************************************************************************/
#include "tss_stdx.h"         /* TSS specific defines                                                       */
//#include "statemanager_CFG.h" /* Configuration-Header of statemanager module                                */



/************************************************************************************************************
 *                                             macro
 ************************************************************************************************************/
////////////////////////////////////////////////////////////////////////////////////////////
// Bitmasken für Interfacefunktionen                                                                                         *
////////////////////////////////////////////////////////////////////////////////////////////
// ZUSTANDSKENNUNG
#define cCAL_TIO              ((uint16) 0x0004)   // Abweisung der Kalibrierung wegen Timeout
#define cCAL_P_HA_INVALID     ((uint16) 0x0008)   // Kalibrierdruck Hinterachse ungültig
#define cCAL_P_VA_INVALID     ((uint16) 0x0010)   // Kalibrierdruck Vorderachse ungültig
#define cCAL_P_MIN_INVALID    ((uint16) 0x0020)   // Kalibrierdruck ungültig (Mindestsolldruck unterschritten)
#define cPOS_CHANGED_VL       ((uint16) 0x0400)   // Radposition VL geändert
#define cPOS_CHANGED_VR       ((uint16) 0x0800)   // Radposition VR geändert
#define cPOS_CHANGED_HL       ((uint16) 0x1000)   // Radposition HL geändert
#define cPOS_CHANGED_HR       ((uint16) 0x2000)   // Radposition HR geändert
#define cZK_ALLE_BITS         ((uint16) 0xffff)   // Maske für komplette Zustandkennungsvariable



/************************************************************************************************************
 *                                            typedef
 ************************************************************************************************************/



/************************************************************************************************************
 *                                    data (Modulglobal) - ROM
 ************************************************************************************************************/



/************************************************************************************************************
 *                                    data (Modulglobal) - RAM
 ************************************************************************************************************/



/************************************************************************************************************
 *                                       data (global) - ROM
 ************************************************************************************************************/



/************************************************************************************************************
 *                                       data (global) - RAM
 ************************************************************************************************************/



/***********************************************************************************************************
 *                                 prototype (local functions - private)
 ***********************************************************************************************************/



/***********************************************************************************************************
 *                                 prototype (local functions - public)
 ***********************************************************************************************************/
extern void InitZK( void );

extern void SetBitZustandskennungZK( uint16 );
extern void ClearBitZustandskennungZK( uint16 );
extern boolean bGetBitZustandskennungZK( uint16 );
extern uint16 ushGetZustandskennungZK( uint16 );
extern void SetChangedBit4WP( uint8 );
extern void SetCalNotAckZK( void );



/************************************************************************************************************
 *                               prototype (external functions - interface)
 ************************************************************************************************************/



#endif /* #ifndef _state_zk_X_H [0] */
